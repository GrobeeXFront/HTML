from aiogram import Router, types, F  # –î–æ–±–∞–≤–ª—è–µ–º F
from aiogram.filters import Command  # –£–¥–∞–ª—è–µ–º Text
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dataclasses import dataclass
from typing import Dict, Optional
import re
from config import settings
from config.bots_config import BotConfig, BotConfigManager
from modules.linux.ssh import SSHManager
from modules.core.auth import check_access

router = Router()

# --- –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
class AddBotStates(StatesGroup):
    WAITING_NAME = State()
    WAITING_IP = State()
    WAITING_CREDENTIALS = State()
    WAITING_PATH = State()
    WAITING_GIT = State()
    CONFIRMATION = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã ---
@dataclass
class ManagedBot:
    config: BotConfig
    status: str = "unknown"

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è ---
def validate_ip(ip: str) -> bool:
    pattern = r"^(\d{1,3}\.){3}\d{1,3}$"
    return re.match(pattern, ip) is not None

def validate_git(url: str) -> bool:
    pattern = r"^(https?|git)://.+\.git$"
    return re.match(pattern, url) is not None

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å ---
class BotManager:
    def __init__(self, bot):
        self.bot = bot
        self.router = Router()
        self.ssh = SSHManager()
        self.bots: Dict[str, ManagedBot] = self._load_bots()
        self._register_handlers()

    def _load_bots(self) -> Dict[str, ManagedBot]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        return {
            name: ManagedBot(config=config)
            for name, config in BotConfigManager.load().items()
        }

    def _register_handlers(self):
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.router.message(Command("start"))(self.start_handler)
        self.router.message(Command("list_bots"))(self.list_bots_handler)
        self.router.message(Command("add_bot"))(self.add_bot_start)
        self.router.message(Command("cancel"))(self.cancel_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.router.message(AddBotStates.WAITING_NAME)(self.handle_name)
        self.router.message(AddBotStates.WAITING_IP)(self.handle_ip)
        self.router.message(AddBotStates.WAITING_CREDENTIALS)(self.handle_credentials)
        self.router.message(AddBotStates.WAITING_PATH)(self.handle_path)
        self.router.message(AddBotStates.WAITING_GIT)(self.handle_git)
        self.router.message(AddBotStates.CONFIRMATION)(self.handle_confirmation)

    # --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
    @check_access(level="user")
    async def start_handler(self, message: Message):
        await message.answer(
            "ü§ñ Bot Manager\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add_bot - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞\n"
            "/list_bots - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )

    @check_access(level="user")
    async def list_bots_handler(self, message: Message):
        if not self.bots:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤")
            return
            
        response = ["üìã –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:"]
        for name, bot in self.bots.items():
            response.append(
                f"‚Ä¢ {name} [{bot.config.type}]\n"
                f"  IP: {bot.config.ip}\n"
                f"  –ü—É—Ç—å: {bot.config.path}\n"
                f"  –°—Ç–∞—Ç—É—Å: {bot.status}"
            )
        await message.answer("\n".join(response))

    @check_access(level="admin")
    async def cancel_handler(self, message: Message, state: FSMContext):
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())

    # --- FSM Handlers ---
    @check_access(level="admin")
    async def add_bot_start(self, message: Message, state: FSMContext):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(AddBotStates.WAITING_NAME)

    async def handle_name(self, message: Message, state: FSMContext):
        if message.text in self.bots:
            await message.answer("‚ö†Ô∏è –ë–æ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:")
            return
            
        await state.update_data(name=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:")
        await state.set_state(AddBotStates.WAITING_IP)

    async def handle_ip(self, message: Message, state: FSMContext):
        if not validate_ip(message.text):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
            
        await state.update_data(ip=message.text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ñ–æ—Ä–º–∞—Ç: `login:password` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ `login` –¥–ª—è SSH-–∫–ª—é—á–∞):",
            parse_mode="Markdown"
        )
        await state.set_state(AddBotStates.WAITING_CREDENTIALS)

    async def handle_credentials(self, message: Message, state: FSMContext):
        parts = message.text.split(":")
        login = parts[0].strip()
        password = parts[1].strip() if len(parts) > 1 else None
        
        await state.update_data(login=login, password=password)
        data = await state.get_data()
        
        default_path = f"/home/{login}/bots/{data['name']}"
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –±–æ—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_path}):"
        )
        await state.set_state(AddBotStates.WAITING_PATH)

    async def handle_path(self, message: Message, state: FSMContext):
        path = message.text.strip()
        await state.update_data(path=path)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
                resize_keyboard=True
            )
        )
        await state.set_state(AddBotStates.WAITING_GIT)

    async def handle_git(self, message: Message, state: FSMContext):
        git_repo = None
        if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            if not validate_git(message.text):
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Git URL! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
            git_repo = message.text
            
        await state.update_data(git_repo=git_repo)
        data = await state.get_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_text = (
            "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–ò–º—è: {data['name']}\n"
            f"IP: {data['ip']}\n"
            f"–õ–æ–≥–∏–Ω: {data['login']}\n"
            f"–ü–∞—Ä–æ–ª—å: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if data.get('password') else '–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SSH-–∫–ª—é—á'}\n"
            f"–ü—É—Ç—å: {data.get('path')}\n"
            f"Git: {data.get('git_repo', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
        
        await message.answer(
            confirm_text,
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                    [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(AddBotStates.CONFIRMATION)

    async def handle_confirmation(self, message: Message, state: FSMContext):
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
            return
            
        data = await state.get_data()
        bot_name = data["name"]
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        new_config = BotConfig(
            ip=data["ip"],
            login=data["login"],
            password=data.get("password"),
            path=data.get("path"),
            git_repo=data.get("git_repo")
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            is_connected = await self.ssh.test_connection(new_config)
            if not is_connected:
                raise ConnectionError("SSH connection failed")
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /add_bot",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.clear()
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞
        bots = BotConfigManager.load()
        bots[bot_name] = new_config
        BotConfigManager.save(bots)
        
        self.bots[bot_name] = ManagedBot(config=new_config)
        
        await message.answer(
            f"‚úÖ –ë–æ—Ç {bot_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
